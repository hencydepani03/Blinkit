import { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  Plus, 
  Package, 
  Users, 
  ShoppingCart, 
  TrendingUp,
  Edit,
  Trash2,
  Search,
  BarChart3,
  DollarSign,
  AlertTriangle,
  Eye,
  TrendingDown,
  Calendar,
  Filter
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useNavigate } from "react-router-dom";
import React from "react";

// API base URL and types
const API_BASE = (import.meta as any).env?.VITE_API_URL || 'http://localhost:5000';
interface Product {
  id: string;
  name: string;
  category: string;
  price: number;
  stock: number;
  unit: string;
  description?: string;
  image?: string;
  sales?: number;
  status?: 'active' | 'low_stock';
}
const mockOrders = [
  {
    id: "#ORD001",
    customer: "John Doe",
    items: 3,
    total: 245,
    status: "pending",
    date: "2024-01-15",
    time: "10:30 AM",
    products: ["Fresh Bananas", "Red Apples", "Fresh Milk"]
  },
  {
    id: "#ORD002", 
    customer: "Jane Smith",
    items: 5,
    total: 380,
    status: "delivered",
    date: "2024-01-15",
    time: "09:15 AM",
    products: ["Brown Bread", "Tomatoes", "Fresh Milk", "Red Apples", "Fresh Bananas"]
  },
  {
    id: "#ORD003",
    customer: "Mike Johnson",
    items: 2,
    total: 125,
    status: "out_for_delivery",
    date: "2024-01-15",
    time: "11:45 AM",
    products: ["Fresh Milk", "Brown Bread"]
  },
  {
    id: "#ORD004",
    customer: "Sarah Wilson",
    items: 4,
    total: 285,
    status: "packed",
    date: "2024-01-14",
    time: "02:20 PM",
    products: ["Tomatoes", "Red Apples", "Fresh Bananas", "Fresh Milk"]
  }
];

const mockCategories = ["Fruits", "Vegetables", "Dairy", "Bakery", "Beverages", "Snacks", "Personal Care"];

const AdminDashboard = () => {
  const { user, isAdmin, logout } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();
  const [searchTerm, setSearchTerm] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [statusFilter, setStatusFilter] = useState("all");
  const [products, setProducts] = useState<Product[]>([]);
  const [loadingProducts, setLoadingProducts] = useState<boolean>(false);
  const [newProduct, setNewProduct] = useState({
    name: "",
    category: "",
    price: "",
    stock: "",
    description: "",
    unit: "",
    image: "/api/placeholder/80/80"
  });

  // Redirect if not admin
  if (!isAdmin) {
    navigate("/");
    return null;
  }

  // Helper to compute status when backend doesn't send it
  const computeStatus = (p: Product) => (Number(p.stock) <= 20 ? 'low_stock' : 'active');

  // Fetch products from API
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoadingProducts(true);
        const res = await fetch(`${API_BASE}/api/products`);
        const data = await res.json();
        if (!res.ok) throw new Error(data?.message || 'Failed to load products');
        setProducts(Array.isArray(data.products) ? data.products : []);
      } catch (err: any) {
        toast({ title: 'Error', description: err.message || 'Failed to load products', variant: 'destructive' });
      } finally {
        setLoadingProducts(false);
      }
    };
    fetchProducts();
  }, [toast]);

  const handleAddProduct = async (e: React.FormEvent) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    if (!token) {
      toast({ title: 'Unauthorized', description: 'Please log in as admin', variant: 'destructive' });
      return;
    }
    try {
      const payload = {
        name: newProduct.name.trim(),
        category: newProduct.category.trim(),
        price: Number(newProduct.price),
        stock: Number(newProduct.stock),
        unit: newProduct.unit.trim(),
        description: newProduct.description?.trim() || '',
        image: newProduct.image?.trim() || '/api/placeholder/80/80'
      };
      const res = await fetch(`${API_BASE}/api/products`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
        body: JSON.stringify(payload)
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.message || 'Failed to add product');
      setProducts(prev => [data.product, ...prev]);
      toast({ title: 'Product added!', description: `${payload.name} has been added to inventory` });
      setNewProduct({
        name: "",
        category: "",
        price: "",
        stock: "",
        description: "",
        unit: "",
        image: "/api/placeholder/80/80"
      });
    } catch (err: any) {
      toast({ title: 'Error', description: err.message || 'Failed to add product', variant: 'destructive' });
    }
  };

  const handleDeleteProduct = async (id: string, name: string) => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast({ title: 'Unauthorized', description: 'Please log in as admin', variant: 'destructive' });
      return;
    }
    try {
      const res = await fetch(`${API_BASE}/api/products/${id}`, { method: 'DELETE', headers: { 'Authorization': `Bearer ${token}` } });
      const data = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(data?.message || 'Failed to delete product');
      setProducts(prev => prev.filter(p => p.id !== id));
      toast({ title: 'Product deleted', description: `${name} has been removed from inventory`, variant: 'destructive' });
    } catch (err: any) {
      toast({ title: 'Error', description: err.message || 'Failed to delete product', variant: 'destructive' });
    }
  };

  const updateOrderStatus = (orderId: string, newStatus: string) => {
    toast({
      title: "Order updated",
      description: `Order ${orderId} status changed to ${newStatus}`,
    });
  };

  // Calculate dynamic stats based on products
  const totalProducts = products.length;
  const activeProducts = products.filter(p => (p.status ?? computeStatus(p)) === 'active').length;
  const lowStockProducts = products.filter(p => (p.status ?? computeStatus(p)) === 'low_stock').length;
  const totalRevenue = mockOrders.reduce((sum, order) => sum + order.total, 0);
  const todayOrders = mockOrders.filter(order => order.date === '2024-01-15').length;

  const stats = [
    {
      title: "Total Products",
      value: totalProducts.toString(),
      icon: Package,
      change: "+12%",
      changeType: "positive",
      description: `${activeProducts} active, ${lowStockProducts} low stock`
    },
    {
      title: "Today's Orders",
      value: todayOrders.toString(),
      icon: ShoppingCart,
      change: "+8%", 
      changeType: "positive",
      description: `${mockOrders.filter(o => o.status === 'pending').length} pending`
    },
    {
      title: "Revenue Today",
      value: `â‚¹${totalRevenue.toLocaleString()}`,
      icon: DollarSign,
      change: "+15%",
      changeType: "positive",
      description: "From all orders"
    },
    {
      title: "Low Stock Alert",
      value: lowStockProducts.toString(),
      icon: AlertTriangle,
      change: lowStockProducts > 0 ? "Needs attention" : "All good",
      changeType: lowStockProducts > 0 ? "negative" : "positive",
      description: "Products running low"
    }
  ];

  // Derived categories and filtered products
  const categoryOptions = Array.from(new Set(products.map(p => p.category))).sort();
  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.category.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = categoryFilter === "all" || product.category === categoryFilter;
    const matchesStatus = statusFilter === "all" || (product.status ?? computeStatus(product)) === statusFilter;
    return matchesSearch && matchesCategory && matchesStatus;
  });

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b bg-background/95 backdrop-blur sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold">Admin Dashboard</h1>
              <p className="text-muted-foreground">Welcome back, {user?.name}</p>
            </div>
            <div className="flex items-center gap-4">
              <Button variant="outline" onClick={() => navigate("/")}>
                View Store
              </Button>
              <Button variant="destructive" onClick={logout}>
                Logout
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {stats.map((stat) => (
            <Card key={stat.title} className="shadow-soft hover:shadow-medium transition-shadow">
              <CardContent className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <stat.icon className={`w-8 h-8 ${
                    stat.changeType === 'negative' ? 'text-destructive' : 'text-primary'
                  }`} />
                  <Badge variant={stat.changeType === 'negative' ? 'destructive' : 'secondary'}>
                    {stat.change}
                  </Badge>
                </div>
                <div>
                  <p className="text-2xl font-bold mb-1">{stat.value}</p>
                  <p className="text-sm font-medium text-foreground">{stat.title}</p>
                  <p className="text-xs text-muted-foreground">{stat.description}</p>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Main Content */}
        <Tabs defaultValue="dashboard" className="space-y-6">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
            <TabsTrigger value="products">Products</TabsTrigger>
            <TabsTrigger value="orders">Orders</TabsTrigger>
            <TabsTrigger value="add-product">Add Product</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
          </TabsList>

          {/* Dashboard Tab */}
          <TabsContent value="dashboard" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Recent Orders */}
              <Card className="lg:col-span-2 shadow-medium">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <ShoppingCart className="w-5 h-5" />
                    Recent Orders
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {mockOrders.slice(0, 4).map((order) => (
                      <div key={order.id} className="flex items-center justify-between p-3 bg-muted/30 rounded-lg">
                        <div>
                          <p className="font-medium">{order.id}</p>
                          <p className="text-sm text-muted-foreground">{order.customer} â€¢ {order.time}</p>
                        </div>
                        <div className="text-right">
                          <p className="font-medium">â‚¹{order.total}</p>
                          <Badge variant={
                            order.status === 'delivered' ? 'default' :
                            order.status === 'pending' ? 'secondary' : 'outline'
                          }>
                            {order.status.replace('_', ' ')}
                          </Badge>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Top Products */}
              <Card className="shadow-medium">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="w-5 h-5" />
                    Top Products
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {mockProducts
                      .sort((a, b) => b.sales - a.sales)
                      .slice(0, 4)
                      .map((product) => (
                        <div key={product.id} className="flex items-center gap-3">
                          <img 
                            src={product.image} 
                            alt={product.name}
                            className="w-10 h-10 rounded-lg object-cover bg-muted"
                          />
                          <div className="flex-1">
                            <p className="font-medium text-sm">{product.name}</p>
                            <p className="text-xs text-muted-foreground">{product.sales} sales</p>
                          </div>
                          <p className="text-sm font-medium">â‚¹{product.price}</p>
                        </div>
                      ))}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Quick Actions */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card className="p-6 hover:shadow-medium transition-shadow cursor-pointer" 
                    onClick={() => (document.querySelector('[value="add-product"]') as HTMLElement)?.click()}>
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-primary/10 rounded-lg">
                    <Plus className="w-6 h-6 text-primary" />
                  </div>
                  <div>
                    <h3 className="font-medium">Add Product</h3>
                    <p className="text-sm text-muted-foreground">Add new items to inventory</p>
                  </div>
                </div>
              </Card>

              <Card className="p-6 hover:shadow-medium transition-shadow cursor-pointer"
                    onClick={() => (document.querySelector('[value="orders"]') as HTMLElement)?.click()}>
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-accent/10 rounded-lg">
                    <ShoppingCart className="w-6 h-6 text-accent" />
                  </div>
                  <div>
                    <h3 className="font-medium">Manage Orders</h3>
                    <p className="text-sm text-muted-foreground">Process pending orders</p>
                  </div>
                </div>
              </Card>

              <Card className="p-6 hover:shadow-medium transition-shadow cursor-pointer"
                    onClick={() => (document.querySelector('[value="analytics"]') as HTMLElement)?.click()}>
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-secondary/10 rounded-lg">
                    <BarChart3 className="w-6 h-6 text-secondary" />
                  </div>
                  <div>
                    <h3 className="font-medium">View Analytics</h3>
                    <p className="text-sm text-muted-foreground">Check performance metrics</p>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          {/* Products Tab */}
          <TabsContent value="products" className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl font-bold">Product Management</h2>
                <p className="text-sm text-muted-foreground">
                  Total: {totalProducts} products â€¢ Active: {activeProducts} â€¢ Low Stock: {lowStockProducts}
                </p>
              </div>
              <div className="flex items-center gap-4">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                  <Input
                    placeholder="Search products..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 w-64"
                  />
                </div>
                <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                  <SelectTrigger className="w-40">
                    <SelectValue placeholder="Category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Categories</SelectItem>
                    {mockCategories.map(category => (
                      <SelectItem key={category} value={category}>{category}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Select value={statusFilter} onValueChange={setStatusFilter}>
                  <SelectTrigger className="w-32">
                    <SelectValue placeholder="Status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Status</SelectItem>
                    <SelectItem value="active">Active</SelectItem>
                    <SelectItem value="low_stock">Low Stock</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid gap-4">
              {filteredProducts.map((product) => (
                <Card key={product.id} className="shadow-soft hover:shadow-medium transition-shadow">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-4">
                      <img 
                        src={product.image} 
                        alt={product.name}
                        className="w-16 h-16 rounded-lg object-cover bg-muted"
                      />
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="font-medium">{product.name}</h3>
                          <Badge variant="secondary">{product.category}</Badge>
                          <Badge 
                            variant={product.status === "low_stock" ? "destructive" : "default"}
                          >
                            {product.status === "low_stock" ? "Low Stock" : "Active"}
                          </Badge>
                        </div>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm text-muted-foreground">
                          <span>Price: â‚¹{product.price}</span>
                          <span>Stock: {product.stock} units</span>
                          <span>Unit: {product.unit}</span>
                          <span>Sales: {product.sales}</span>
                        </div>
                        <p className="text-sm text-muted-foreground mt-1">{product.description}</p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button variant="outline" size="icon" title="View Details">
                          <Eye className="w-4 h-4" />
                        </Button>
                        <Button variant="outline" size="icon" title="Edit Product">
                          <Edit className="w-4 h-4" />
                        </Button>
                        <Button 
                          variant="outline" 
                          size="icon"
                          title="Delete Product"
                          onClick={() => handleDeleteProduct(product.id, product.name)}
                        >
                          <Trash2 className="w-4 h-4 text-destructive" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
              {filteredProducts.length === 0 && (
                <Card className="p-8 text-center">
                  <Package className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-medium mb-2">No products found</h3>
                  <p className="text-muted-foreground">Try adjusting your search or filters</p>
                </Card>
              )}
            </div>
          </TabsContent>

          {/* Orders Tab */}
          <TabsContent value="orders" className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl font-bold">Order Management</h2>
                <p className="text-sm text-muted-foreground">
                  {mockOrders.length} total orders â€¢ {mockOrders.filter(o => o.status === 'pending').length} pending
                </p>
              </div>
              <div className="flex items-center gap-2">
                <Button variant="outline" size="sm">
                  <Filter className="w-4 h-4 mr-2" />
                  Filter
                </Button>
                <Button variant="outline" size="sm">
                  <Calendar className="w-4 h-4 mr-2" />
                  Today
                </Button>
              </div>
            </div>
            
            <div className="grid gap-4">
              {mockOrders.map((order) => (
                <Card key={order.id} className="shadow-soft hover:shadow-medium transition-shadow">
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="font-medium">{order.id}</h3>
                          <Badge 
                            variant={
                              order.status === "delivered" ? "default" :
                              order.status === "pending" ? "secondary" :
                              order.status === "out_for_delivery" ? "outline" :
                              "secondary"
                            }
                          >
                            {order.status.replace('_', ' ')}
                          </Badge>
                        </div>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm text-muted-foreground mb-3">
                          <span>Customer: {order.customer}</span>
                          <span>{order.items} items â€¢ â‚¹{order.total}</span>
                          <span>{order.date} â€¢ {order.time}</span>
                          <span>ID: {order.id}</span>
                        </div>
                        <div className="flex flex-wrap gap-1">
                          {order.products.slice(0, 3).map((product, idx) => (
                            <Badge key={idx} variant="outline" className="text-xs">
                              {product}
                            </Badge>
                          ))}
                          {order.products.length > 3 && (
                            <Badge variant="outline" className="text-xs">
                              +{order.products.length - 3} more
                            </Badge>
                          )}
                        </div>
                      </div>
                      <div className="flex items-center gap-2 ml-4">
                        {order.status === "pending" && (
                          <>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => updateOrderStatus(order.id, "packed")}
                            >
                              Mark Packed
                            </Button>
                            <Button 
                              variant="default" 
                              size="sm"
                              onClick={() => updateOrderStatus(order.id, "out_for_delivery")}
                            >
                              Ship Order
                            </Button>
                          </>
                        )}
                        {order.status === "packed" && (
                          <Button 
                            variant="default" 
                            size="sm"
                            onClick={() => updateOrderStatus(order.id, "out_for_delivery")}
                          >
                            Ship Order
                          </Button>
                        )}
                        {order.status === "out_for_delivery" && (
                          <Button 
                            variant="default" 
                            size="sm"
                            onClick={() => updateOrderStatus(order.id, "delivered")}
                          >
                            Mark Delivered
                          </Button>
                        )}
                        <Button variant="outline" size="sm">
                          <Eye className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* Add Product Tab */}
          <TabsContent value="add-product">
            <Card className="max-w-2xl mx-auto shadow-medium">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Plus className="w-5 h-5" />
                  Add New Product
                </CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleAddProduct} className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="name">Product Name</Label>
                      <Input
                        id="name"
                        value={newProduct.name}
                        onChange={(e) => setNewProduct({...newProduct, name: e.target.value})}
                        placeholder="Enter product name"
                        required
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="category">Category</Label>
                      <Select
                        value={newProduct.category}
                        onValueChange={(value) => setNewProduct({...newProduct, category: value})}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select category" />
                        </SelectTrigger>
                        <SelectContent>
                          {mockCategories.map(category => (
                            <SelectItem key={category} value={category}>{category}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-3 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="price">Price (â‚¹)</Label>
                      <Input
                        id="price"
                        type="number"
                        value={newProduct.price}
                        onChange={(e) => setNewProduct({...newProduct, price: e.target.value})}
                        placeholder="Enter price"
                        required
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="stock">Stock Quantity</Label>
                      <Input
                        id="stock"
                        type="number"
                        value={newProduct.stock}
                        onChange={(e) => setNewProduct({...newProduct, stock: e.target.value})}
                        placeholder="Enter stock quantity"
                        required
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="unit">Unit</Label>
                      <Input
                        id="unit"
                        value={newProduct.unit}
                        onChange={(e) => setNewProduct({...newProduct, unit: e.target.value})}
                        placeholder="e.g., 1 kg, 1 liter"
                        required
                      />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="description">Description</Label>
                    <Textarea
                      id="description"
                      value={newProduct.description}
                      onChange={(e) => setNewProduct({...newProduct, description: e.target.value})}
                      placeholder="Enter product description"
                      rows={3}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="image">Image URL (Optional)</Label>
                    <Input
                      id="image"
                      value={newProduct.image}
                      onChange={(e) => setNewProduct({...newProduct, image: e.target.value})}
                      placeholder="Enter image URL or use default"
                    />
                  </div>

                  <Button type="submit" variant="gradient" size="lg" className="w-full">
                    <Plus className="w-4 h-4 mr-2" />
                    Add Product to Inventory
                  </Button>
                </form>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Analytics Tab */}
          <TabsContent value="analytics" className="space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-bold">Analytics & Reports</h2>
              <div className="flex items-center gap-2">
                <Button variant="outline" size="sm">
                  <Calendar className="w-4 h-4 mr-2" />
                  Last 7 days
                </Button>
                <Button variant="outline" size="sm">Export</Button>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
              <Card className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-primary/10 rounded-lg">
                    <TrendingUp className="w-5 h-5 text-primary" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Avg Order Value</p>
                    <p className="text-lg font-bold">â‚¹{Math.round(totalRevenue / mockOrders.length)}</p>
                  </div>
                </div>
              </Card>
              <Card className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-accent/10 rounded-lg">
                    <Users className="w-5 h-5 text-accent" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Total Customers</p>
                    <p className="text-lg font-bold">{new Set(mockOrders.map(o => o.customer)).size}</p>
                  </div>
                </div>
              </Card>
              <Card className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-secondary/10 rounded-lg">
                    <Package className="w-5 h-5 text-secondary" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Best Category</p>
                    <p className="text-lg font-bold">Fruits</p>
                  </div>
                </div>
              </Card>
              <Card className="p-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-destructive/10 rounded-lg">
                    <TrendingDown className="w-5 h-5 text-destructive" />
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">Return Rate</p>
                    <p className="text-lg font-bold">2.3%</p>
                  </div>
                </div>
              </Card>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className="p-6">
                <h3 className="text-lg font-semibold mb-4">Top Selling Products</h3>
                <div className="space-y-3">
                  {mockProducts
                    .sort((a, b) => b.sales - a.sales)
                    .slice(0, 5)
                    .map((product, index) => (
                      <div key={product.id} className="flex items-center gap-3">
                        <span className="text-sm font-medium w-6">#{index + 1}</span>
                        <img 
                          src={product.image} 
                          alt={product.name}
                          className="w-10 h-10 rounded object-cover bg-muted"
                        />
                        <div className="flex-1">
                          <p className="font-medium text-sm">{product.name}</p>
                          <p className="text-xs text-muted-foreground">{product.category}</p>
                        </div>
                        <div className="text-right">
                          <p className="text-sm font-medium">{product.sales} sold</p>
                          <p className="text-xs text-muted-foreground">â‚¹{product.price * product.sales}</p>
                        </div>
                      </div>
                    ))}
                </div>
              </Card>

              <Card className="p-6">
                <h3 className="text-lg font-semibold mb-4">Order Status Distribution</h3>
                <div className="space-y-3">
                  {['delivered', 'pending', 'out_for_delivery', 'packed'].map(status => {
                    const count = mockOrders.filter(o => o.status === status).length;
                    const percentage = (count / mockOrders.length) * 100;
                    return (
                      <div key={status} className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <div className={`w-3 h-3 rounded-full ${
                            status === 'delivered' ? 'bg-primary' :
                            status === 'pending' ? 'bg-secondary' :
                            status === 'out_for_delivery' ? 'bg-accent' : 'bg-muted'
                          }`} />
                          <span className="text-sm capitalize">{status.replace('_', ' ')}</span>
                        </div>
                        <div className="text-right">
                          <span className="text-sm font-medium">{count}</span>
                          <span className="text-xs text-muted-foreground ml-2">({percentage.toFixed(1)}%)</span>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default AdminDashboard;